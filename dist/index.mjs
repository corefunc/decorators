function Instance(t,n=!0){return(e,o)=>{if(e[o]instanceof t)return;let c=e[o];Reflect.deleteProperty(e,o),Reflect.defineProperty(e,o,{configurable:!0,enumerable:!0,get:()=>c,set:e=>{if(n)try{c=new t(e)}catch{}else c=new t(e)}})}}function instance(t,n=!0){return Instance(t,n)}function attempt(t){return function attemptDecorator(n,e,o){const c=o.value;"[object AsyncFunction]"===Object.prototype.toString.call(c)?o.value=async function(...n){try{const e=await c.apply(this,n);return void 0!==e&&e.catch&&e.catch(e=>t(e,n)),e}catch(e){t(e,n)}}:o.value=function(...n){try{return c.apply(this,n)}catch(e){t(e,n)}}}}function consoleGroup(t){return function consoleGroupDecorator(n,e,o){const c=o.value;return"[object AsyncFunction]"===Object.prototype.toString.call(c)?o.value=async function(...n){console.group(t);try{const t=await c.apply(this,n);return console.groupEnd(),t}catch(t){throw console.groupEnd(),t}}:o.value=function(...n){console.group(t);try{const t=c.apply(this,n);return console.groupEnd(),t}catch(t){console.groupEnd()}},o}}function measureExecution(t){return function measureExecutionDecorator(n,e,o){const c=o.value;return"[object AsyncFunction]"===Object.prototype.toString.call(c)?o.value=async function(...n){console.time(t);try{const e=await c.apply(this,n);return console.timeEnd(t),e}catch(n){throw console.timeEnd(t),n}}:o.value=function(...n){console.time(t);try{const e=c.apply(this,n);return console.timeEnd(t),e}catch(n){throw console.timeEnd(t),n}},o}}export{Instance,attempt,consoleGroup,instance,measureExecution};
//# sourceMappingURL=index.mjs.map
