{"version":3,"file":"index.js","sources":["../src/method/attempt.mjs","../src/method/measure-execution.mjs"],"sourcesContent":["/**\n * @name attempt\n * @namespace method\n * @param {Function} handlerFunction Function to handle error, accepts one argument - actual error\n * @returns {Function}\n * @example\n * ```javascript\n * class Kitty {\n *   @attempt((error: Error, args: any[]) => {\n *     console.warn(\"Exception thrown!\");\n *     console.log(error.message); // \"uwu\"\n *     console.dir(args); // [ 10, false ]\n *   })\n *   meow(volume: number, cute = true) {\n *     throw new Error(\"uwu\");\n *   }\n * }\n * new Kitty().meow(10, false);\n * ```\n * @since 0.0.1\n */\nexport function attempt(handlerFunction) {\n  return function (_target, _key, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      try {\n        const value = originalMethod.apply(this, args);\n        if (value !== undefined && value.catch) {\n          value.catch((error) => handlerFunction(error, args));\n        }\n        return value;\n      } catch (error) {\n        handlerFunction(error, args);\n      }\n    };\n  };\n}\n","/**\n * @name measureExecution\n * @namespace method\n * @param {string} label Measure method execution using `console.time()`\n * @returns {Function}\n * @example\n * ```javascript\n * class Class {\n *   @measureExecution(\"long execution time\")\n *   hardTask() {\n *     let result = 0;\n *     for (let index = 0; index < 1_000_000_000; index++) {\n *       result += index;\n *     }\n *     return result;\n *   }\n * }\n * new Class().hardTask();\n * ```\n * @since 0.0.2\n */\nexport function measureExecution(label) {\n  return function (_target, _key, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args) {\n      console.time(label);\n      const value = await originalMethod.apply(this, args);\n      console.timeEnd(label);\n      return value;\n    };\n    return descriptor;\n  };\n}\n"],"names":["attempt","handlerFunction","_target","_key","descriptor","originalMethod","value","args","apply","this","undefined","catch","error","measureExecution","label","async","console","time","timeEnd"],"mappings":"0NAqBO,SAASA,QAAQC,UACf,SAAUC,EAASC,EAAMC,SACxBC,EAAiBD,EAAWE,MAClCF,EAAWE,MAAQ,YAAaC,aAEtBD,EAAQD,EAAeG,MAAMC,KAAMF,eAC3BG,IAAVJ,GAAuBA,EAAMK,OAC/BL,EAAMK,MAAOC,GAAUX,EAAgBW,EAAOL,IAEzCD,EACP,MAAOM,GACPX,EAAgBW,EAAOL,0BCXxB,SAASM,iBAAiBC,UACxB,SAAUZ,EAASC,EAAMC,SACxBC,EAAiBD,EAAWE,aAClCF,EAAWE,MAAQS,kBAAmBR,GACpCS,QAAQC,KAAKH,SACPR,QAAcD,EAAeG,MAAMC,KAAMF,UAC/CS,QAAQE,QAAQJ,GACTR,GAEFF"}